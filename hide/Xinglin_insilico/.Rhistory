m^3
m^4
m%*%m%*%m%*%m
m%*%m%*%m%*%m%*M
m%*%m%*%m%*%m%*m
m%*%m%*%m%*%m%*%m
m%*%m%*%m
m%*%m%*%m%*%m%*%m%*%m
m%*%m%*%m%*%m%*%m%*%m%*%m
m%*%m%*%m%*%m%*%m%*%m%*%m%*%m
m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m
m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m
m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m
m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m
m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m
m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m
m = matrix(data = c(0,0.3,0,0,0,0,0,0,0.02,0,0,1,0.1,0,0,0,0.8,0,0,0,0,0,0,0,0,0.056,1,0,0.4,0,0,0,0,0,0,0,0,0,0,0,0.18,0.126,0,0,0.1,1,0,1,0,0.216,0,0,0,0,0,0,0,0,504,0,0,0.4,0,1,0), ncol = 8, nrow = 8)
m = matrix(data = c(0,0.3,0,0,0,0,0,0,0.02,0,0,1,0.1,0,0,0,0.8,0,0,0,0,0,0,0,0,0.056,1,0,0.4,0,0,0,0,0,0,0,0,0,0,0.18,0.126,0,0,0.1,1,0,1,0,0.216,0,0,0,0,0,0,0,0,504,0,0,0.4,0,1,0), ncol = 8, nrow = 8)
m
m = matrix(data = c(0,0.3,0,0,0,0,0,0,0.02,0,0,1,0.1,0,0,0,0.8,0,0,0,0,0,0,0,0,0.056,1,0,0.4,0,0,0,0,0,0,0,0,0,0,0,0.18,0.126,0,0,0.1,1,0,1,0,0.216,0,0,0,0,0,0,0,0.504,0,0,0.4,0,1,0), ncol = 8, nrow = 8)
m
m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m
m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m
m%*%m
m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m%*%m
m
rowsum(m)
m^Inf
d=read.delim("http://dnett.github.io/S510/PlantDensity.txt")
d
names(d)=c("x","y")
head(d)
plot(d[,1],d[,2],col=4,pch=16,xlab="Plant Density",
ylab="Grain Yield")
d=read.delim("http://dnett.github.io/S510/PlantDensity.txt")
d
names(d)=c("x","y")
head(d)
plot(d[,1],d[,2],col=4,pch=16,xlab="Plant Density",
ylab="Grain Yield")
n=nrow(d)
x=(d$x-mean(d$x))/10
x
x1=matrix(1,nrow=n,ncol=1)
x2=cbind(x1,x)
x3=cbind(x2,x^2)
x4=cbind(x3,x^3)
x5=matrix(model.matrix(~0+factor(x)),nrow=n)
proj <- function(x) {
x %*% MASS::ginv(t(x) %*% x) %*% t(x)
}
p1=proj(x1)
p2=proj(x2)
p3=proj(x3)
p4=proj(x4)
p5=proj(x5)
((p2-p1)%*%x5)[1,] *5 ## linear
((p3-p2)%*%x5)[1,] *7 ## quadratic
((p4-p3)%*%x5)[1,] *10 ## cubic
((p5-p4)%*%x5)[1,] *70 ## quartic
install.packages("emmeans")
library(emmeans)
pigs
library(emmeans)
d = pigs
library(emmeans)
d = data.frame(pigs, lconc = log(pigs$conc), perc = factor(pigs$percent))
proj=function(X){
X%*%MASS::ginv(t(X)%*%X)%*%t(X)
}
com=function(y,A,B){
ss=t(y)%*%(proj(A)-proj(B))%*%y
df=floor(Matrix::rankMatrix(A)-Matrix::rankMatrix(B))
ms=ss/df
f=ms/0.01351574
p=pf(f,df,17,lower.tail=FALSE)
return(round(c(ss,df,ms,f,p),4))
}
x1=matrix(rep(1,nrow(d)))
xa=model.matrix(~0+d$source)
xb=model.matrix(~0+d$perc)
xab=model.matrix(~0+d$perc:d$source)
a = lm(lconc~source+perc+source*perc, data=d)
anova(a)
car::Anova(o, type="II")
car::Anova(a, type="II")
c = lm(lconc ~ source + perc + source:perc, data =d)
joint_tests(emmeans(c, c("source", "perc")), test = "F")
## reference: https://dnett.github.io/S510/hw7sol.pdf
src.red=function(x,dat){
new.ab=x[,c(-8,-12)]
for(i in 1:nrow(x)){
if(dat[i,1]=="soy"&dat[i,2]=="18")
{new.ab[i,]=c(rep(1,4),rep(-1,3),rep(0,3))}else
if(dat[i,1]=="skim"&dat[i,2]=="18")
{new.ab[i,]=c(rep(1,4),rep(0,3),rep(-1,3))}
}
return(new.ab)
}
xs.red=src.red(xab,d)
anova(lm(d$lconc~0+xs.red),lm(d$lconc~0+xab))
src3=c(0.81788,2,0.81788/2,30.256,2.507e-06)
src3=c(0.81788,2,0.81788/2,30.256,2.507e-06)
prct.red=function(x,dat){
new.ab=x[,c(-10,-11,-12)]
for(i in 1:nrow(x)){
if(dat[i,1]=="skim"&dat[i,2]=="12"){new.ab[i,]=c(1,-1,0,0,1,-1,0,0,1)}else
if(dat[i,1]=="skim"&dat[i,2]=="15"){new.ab[i,]=c(1,0,-1,0,1,0,-1,0,1)}else
if(dat[i,1]=="skim"&dat[i,2]=="18"){new.ab[i,]=c(1,0,0,-1,1,0,0,-1,1)}
}
return(new.ab)
}
xp.red=prct.red(xab,d)
anova(lm(d$lconc~0+xp.red),lm(d$lconc~0+xab))
prct3=c(0.33304,3,0.33304/3,8.2137,0.001348)
View(d)
ls_fish = sum(d[1:10, 4])/12
ls_fish
ls_fish = mean(d[1:10, 4])
ls_fish
(3.526361+3.342862)/2
ls_fish = mean(d[1:10, 4])
mean(mean(d[1:2],4), mean(d[3:5],4), mean(d[6:7],4), mean(d[8:10],4))
ls_fish = mean(d[1:10, 4])
mean(c(mean(d[1:2],4), mean(d[3:5],4), mean(d[6:7],4), mean(d[8:10],4)))
ls_fish = mean(d[1:10, 4])
mean(c(mean(d[1:2,4]), mean(d[3:5,4]), mean(d[6:7,4]), mean(d[8:10,4])))
ls_fish
ls_fish = mean(c(mean(d[1:2,4]), mean(d[3:5,4]), mean(d[6:7,4]), mean(d[8:10,4])))
ls_fish
ls_soy = mean(c(mean(d[11:13,4]), mean(d[14:16,4]), mean(d[17:19,4]), mean(d[18,4])))
ls_fish = mean(c(mean(d[1:2,4]), mean(d[3:5,4]), mean(d[6:7,4]), mean(d[8:10,4])))
ls_fish
ls_soy = mean(c(mean(d[11:13,4]), mean(d[14:16,4]), mean(d[17:19,4]), mean(d[18,4])))
ls_soy
ls_skim = mean(c(mean(d[21:23,4]), mean(d[24:26,4]), mean(d[27:28,4]), mean(d[29,4])))
ls_fish = mean(c(mean(d[1:2,4]), mean(d[3:5,4]), mean(d[6:7,4]), mean(d[8:10,4])))
ls_fish
ls_soy = mean(c(mean(d[11:13,4]), mean(d[14:16,4]), mean(d[17:19,4]), mean(d[18,4])))
ls_soy
ls_skim = mean(c(mean(d[21:23,4]), mean(d[24:26,4]), mean(d[27:28,4]), mean(d[29,4])))
ls_skim
mean(d[11:13,4]
)
mean(d[14:16,4])
mean(d[17:19,4])
mean(d[18,4])
ls_fish = mean(c(mean(d[1:2,4]), mean(d[3:5,4]), mean(d[6:7,4]), mean(d[8:10,4])))
ls_fish
ls_soy = mean(c(mean(d[11:13,4]), mean(d[14:16,4]), mean(d[17:19,4]), mean(d[20,4])))
ls_soy
ls_skim = mean(c(mean(d[21:23,4]), mean(d[24:26,4]), mean(d[27:28,4]), mean(d[29,4])))
ls_skim
ls_fish = mean(c(mean(d[1:2,4]), mean(d[3:5,4]), mean(d[6:7,4]), mean(d[8:10,4])))
ls_fish
ls_soy = mean(c(mean(d[11:13,4]), mean(d[14:16,4]), mean(d[17:19,4]), mean(d[20,4])))
ls_soy
ls_skim = mean(c(mean(d[21:23,4]), mean(d[24:26,4]), mean(d[27:28,4]), mean(d[29,4])))
ls_skim
ls_9 = mean(c(mean(d[1:2,4]), mean(d[11:13,4]), mean(d[21:23,4]))))
ls_fish = mean(c(mean(d[1:2,4]), mean(d[3:5,4]), mean(d[6:7,4]), mean(d[8:10,4])))
ls_fish
ls_soy = mean(c(mean(d[11:13,4]), mean(d[14:16,4]), mean(d[17:19,4]), mean(d[20,4])))
ls_soy
ls_skim = mean(c(mean(d[21:23,4]), mean(d[24:26,4]), mean(d[27:28,4]), mean(d[29,4])))
ls_skim
ls_9 = mean(c(mean(d[1:2,4]), mean(d[11:13,4]), mean(d[21:23,4])))
ls_9
ls_fish = mean(c(mean(d[1:2,4]), mean(d[3:5,4]), mean(d[6:7,4]), mean(d[8:10,4])))
ls_fish
ls_soy = mean(c(mean(d[11:13,4]), mean(d[14:16,4]), mean(d[17:19,4]), mean(d[20,4])))
ls_soy
ls_skim = mean(c(mean(d[21:23,4]), mean(d[24:26,4]), mean(d[27:28,4]), mean(d[29,4])))
ls_skim
ls_9 = mean(c(mean(d[1:2,4]), mean(d[11:13,4]), mean(d[21:23,4])))
ls_9
ls_12 = mean(c(mean(d[3:5,4]), mean(d[14:16,4]), mean(d[24:26,4])))
ls_12
ls_fish = mean(c(mean(d[1:2,4]), mean(d[3:5,4]), mean(d[6:7,4]), mean(d[8:10,4])))
ls_fish
ls_soy = mean(c(mean(d[11:13,4]), mean(d[14:16,4]), mean(d[17:19,4]), mean(d[20,4])))
ls_soy
ls_skim = mean(c(mean(d[21:23,4]), mean(d[24:26,4]), mean(d[27:28,4]), mean(d[29,4])))
ls_skim
ls_9 = mean(c(mean(d[1:2,4]), mean(d[11:13,4]), mean(d[21:23,4])))
ls_9
ls_12 = mean(c(mean(d[3:5,4]), mean(d[14:16,4]), mean(d[24:26,4])))
ls_12
ls_15 = mean(c(mean(d[6:7,4]), mean(d[17:19,4]), mean(d[27:28,4])))
ls_15
ls_18 = mean(c(mean(d[8:10,4]), mean(d[20,4]), mean(d[29,4])))
ls_18
e = lm(lconc ~ source + perc + source:perc, data =d)
e1=lm(lconc~source+percent+source*percent,data=d)
anova(e1,e)
install.packages("M3C")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("M3C")
installed.packages("scRNAseq")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("scRNAseq")
version(scRNAseq)
package_version(scRNAseq)
package_version("scRNAseq")
library(scRNAseq)
packageVersion("scRNAseq")
sessionInfo()
setwd("/Users/JasonJia/Desktop/CRFE/Xinglin_insilico/phenotype_relevance")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GSEABenchmarkeR")
library(GSEABenchmarkeR)
?GSEABenchmarkeR
?SEABenchmarkeR
?GSEABenchmarkeR
library(GSEABenchmarkeR)
?GSEABenchmarkeR
??GSEABenchmarkeR
tcga <- loadEData("tcga", nr.datasets=2)
install.packages(EnrichmentBrowser)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EnrichmentBrowser")
library(EnrichmentBrowser)
?getGenesets
anno = getGenesets(db = "go")
anno = getGenesets(org = "hsa", db = "go")
View(anno)
tcga <- runDE(tcga, de.method="limma", padj.method="flexible")
rowData(geo2kegg[[1]], use.names=TRUE)
View(tcga)
tcga$BLCA$sample
tcga$BLCA$type
tcga$BLCA$GROUP
tcga$BLCA
table(brca$GROUP)
brca <- tcga[[2]]
library(GSEABenchmarkeR)
tcga <- loadEData("tcga", nr.datasets=2)
brca <- tcga[[2]]
table(brca$GROUP)
brca <- runDE(brca, de.method="limma", padj.method="flexible")
View(brca)
rowData(brca[[1]], use.names=TRUE)
View(brca)
library(EnrichmentBrowser)
anno = getGenesets(org = "hsa", db = "go")
geo2kegg <- loadEData("geo2kegg")
names(geo2kegg)
geo2kegg[[1]]
geo2kegg <- maPreproc(geo2kegg[1:5])
geo2kegg[[1]]
geo2kegg <- maPreproc(geo2kegg[1:5])
library(GSEABenchmarkeR)
geo2kegg <- loadEData("geo2kegg")
names(geo2kegg)
geo2kegg[[1]]
geo2kegg <- maPreproc(geo2kegg[1:5])
geo2kegg[[1]]
se <- geo2kegg[[1]]
table(se$GROUP)
library(EnrichmentBrowser)
kegg.gs <- getGenesets(org="hsa", db="kegg")
kegg.ora.res <- runEA(geo2kegg[[1]], method="ora", gs=kegg.gs, perm=0)
kegg.ora.res
kegg.ora.res <- runEA(geo2kegg[[1]], method="ora", gs=kegg.gs, perm=0)
?runEA
kegg.ora.res <- runEA(geo2kegg[[1]], method="padog", gs=kegg.gs, perm=0)
kegg.ora.res <- runEA(geo2kegg[[1]], method="padog", gs=kegg.gs, perm=0)
se <- geo2kegg[[1]]
table(se$GROUP)
geo2kegg[[1]]
library(EnrichmentBrowser)
kegg.gs <- getGenesets(org="hsa", db="kegg")
kegg.ora.res <- runEA(geo2kegg[[1]], method="padog", gs=kegg.gs, perm=0)
View(geo2kegg)
geo2kegg <- runDE(geo2kegg, de.method="limma", padj.method="flexible")
rowData(geo2kegg[[1]], use.names=TRUE)
library(EnrichmentBrowser)
kegg.gs <- getGenesets(org="hsa", db="kegg")
kegg.ora.res <- runEA(geo2kegg[[1]], method="padog", gs=kegg.gs, perm=0)
View(geo2kegg)
kegg.gs <- getGenesets(org="hsa", db="kegg")
kegg.ora.res <- runEA(geo2kegg[[1]], method="padog", gs=kegg.gs, perm=0)
library(EnrichmentBrowser)
kegg.gs <- getGenesets(org="hsa", db="kegg")
kegg.ora.res <- runEA(geo2kegg[[1]], method="padog", gs=kegg.gs, perm=0)
kegg.gs
View(kegg.gs)
kegg.gs[["hsa01100_Metabolic_pathways"]]
kegg.gs[["hsa01100_Metabolic_pathways"]]
kegg.gs <- getGenesets(org="hsa", db="go")
View(geo2kegg)
View(kegg.gs)
kegg.gs <- getGenesets(org="hsa", db="kegg")
View(kegg.gs)
kegg.gs <- getGenesets(org="hsa", db="go")
kegg.ora.res <- runEA(geo2kegg[[1]], method="padog", gs=kegg.gs, perm=0)
kegg.ora.res <- runEA(geo2kegg[[1]], method="ora", gs=kegg.gs, perm=0)
kegg.ora.res
mala.kegg.file <- file.path(data.dir, "malacards", "KEGG.rds")
?file.path
mala.kegg.file <- file.path(geo2kegg[[1]], "malacards", "KEGG.rds")
kegg.ora.res$ora$GSE1297
mala.kegg.file <- file.path(kegg.ora.res$ora$GSE1297, "malacards", "KEGG.rds")
mala.kegg <- readRDS(mala.kegg.file)
sapply(mala.kegg, nrow)
mala.kegg.file <- file.path(kegg.ora.res$ora$GSE1297, "malacards", "KEGG.rds")
mala.kegg <- readRDS(mala.kegg.file)
sapply(mala.kegg, nrow)
readRDS
?readRDS
libPaths()
.libPaths()
mala.kegg.file <- file.path("/Library/Frameworks/R.framework/Versions/4.1/Resources/library/GSEABenchmarkeR/extdata/malacards", "malacards", "KEGG.rds")
mala.kegg <- readRDS(mala.kegg.file)
mala.kegg <- readRDS("/Library/Frameworks/R.framework/Versions/4.1/Resources/library/GSEABenchmarkeR/extdata/malacards/KEGG.rds")
sapply(mala.kegg, nrow)
mala.kegg$ALZ
mala.kegg <- readRDS("/Library/Frameworks/R.framework/Versions/4.1/Resources/library/GSEABenchmarkeR/extdata/malacards/GO_BP.rds")
sapply(mala.kegg, nrow)
mala.kegg$ALZ
obs.score <- evalRelevance(ea.ranks$ora$GSE1297, mala.kegg$ALZ)
obs.score <- evalRelevance(kegg.ora.res$ora$GSE1297, mala.kegg$ALZ)
kegg.ora.res$ora$GSE1297
?evalRelevance
evalRelevanc
kegg.ora.res$ora$GSE1297$ranking
obs.score <- evalRelevance(kegg.ora.res$ora$GSE1297$ranking, mala.kegg$ALZ)
gs.names <- kegg.ora.res$ora$GSE1297$ranking$GENE.SET
gs.ids <- substring(gs.names, 1, 8)
rand.scores <- compRand(mala.kegg$ALZ, gs.ids, perm=50)
summary(rand.scores)
(sum(rand.scores >= obs.score) + 1) / 51
gs.ids
rand.scores <- compRand(mala.kegg$ALZ, gs.ids, perm=50)
summary(rand.scores)
rand.scores
obs.score <- evalRelevance(kegg.ora.res$ora$GSE1297$ranking, mala.kegg$ALZ)
obs.score
gs.names <- kegg.ora.res$ora$GSE1297$ranking$GENE.SET
gs.ids <- substring(gs.names, 1, 8)
rand.scores <- compRand(mala.kegg$ALZ, gs.ids, perm=50)
summary(rand.scores)
?compRand
compOpt(mala.kegg$ALZ, gs.ids)
gs.ids <- substring(gs.names, 1, 10)
rand.scores <- compRand(mala.kegg$ALZ, gs.ids, perm=50)
summary(rand.scores)
(sum(rand.scores >= obs.score) + 1) / 51
rand.scores <- compRand(mala.kegg$ALZ, gs.ids, perm=1000)
summary(rand.scores)
(sum(rand.scores >= obs.score) + 1) / 51
compOpt(mala.kegg$ALZ, gs.ids)
(sum(rand.scores >= obs.score) + 1) / 1001
compOpt(mala.kegg$ALZ, gs.ids)
hist(rand.scores)
##CRFE
kegg.gs
?write.csv
##CRFE
write.csv(kegg.gs, file = "/Users/JasonJia/Desktop/CRFE/Xinglin_insilico/phenotype_relevance/anno_GO.txt")
fnlist <- function(x, fil){ z <- deparse(substitute(x))
cat(z, "\t", file=fil)
nams=names(x)
for (i in seq_along(x) ){ cat(nams[i], "\t",  x[[i]], "\n",
file=fil, append=TRUE) }
}
fnlist(kegg.gs, file = "/Users/JasonJia/Desktop/CRFE/Xinglin_insilico/phenotype_relevance/anno_GO.txt")
fnlist(kegg.gs,"/Users/JasonJia/Desktop/CRFE/Xinglin_insilico/phenotype_relevance/anno_GO.txt")
library(clusterProfiler)
?getFunctionalAnnotationChart
??getFunctionalAnnotationChart
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("RDAVIDWebService")
source("https://bioconductor.org/biocLite.R")
biocLite("RDAVIDWebService"
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("RDAVIDWebService")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("RDAVIDWebService")
library(getFunctionalAnnotationChart)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("RDAVIDWebService")
library(DAVIDWebService)
library(RDAVIDWebService)
library(RDAVIDWebService)
install.packages("RDAVIDWebService")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("RDAVIDWebService")
?enrichDAVID
kegg.ora.res$ora$GSE1297
rowData(geo2kegg[[1]], use.names=TRUE)
genes = sort(rowData(geo2kegg[[1]], use.names=TRUE), rowData(geo2kegg[[1]], use.names=TRUE)[,4])
genes
genes$ADJ.PVAL
genes = sort(genes, genes[,4])
genes
genes = sort(genes, genes$ADJ.PVAL)
genes
?sort
genes = sort(genes$ADJ.PVAL)
genes
genes = order(rowData(geo2kegg[[1]], use.names=TRUE), rowData(geo2kegg[[1]], use.names=TRUE)[,4])
genes
view(rowData(geo2kegg[[1]], use.names=TRUE))
View(rowData(geo2kegg[[1]], use.names=TRUE))
rowData(geo2kegg[[1]], use.names=TRUE)
sort(rowData(geo2kegg[[1]], use.names=TRUE))
sort(rowData(geo2kegg[[1]], use.names=TRUE))["780",]
sort(rowData(geo2kegg[[1]], use.names=TRUE))["12795",]
sort(rowData(geo2kegg[[1]], use.names=TRUE))["2345",]
sort(rowData(geo2kegg[[1]], use.names=TRUE))["12",]
sort(rowData(geo2kegg[[1]], use.names=TRUE)[,4])["12",]
sort(rowData(geo2kegg[[1]], use.names=TRUE)[,4])
sort(rowData(geo2kegg[[1]], use.names=TRUE))[,4]
genes = as.data.frame(rowData(geo2kegg[[1]], use.names=TRUE))
genes
?order
genes = genes[order(genes$ADJ.PVAL),]
genes
rownames(genes)
fileConn<-file("/Users/JasonJia/Desktop/CRFE/Xinglin_insilico/phenotype_relevance/GSE1297genes.txt")
writeLines(rownames(genes), fileConn)
close(fileConn)
length(rownames(genes))
sum(genes$ADJ.PVAL>0.05)
10279/13041
1-0.7882064
write.table(genes$ADJ.PVAL, "/Users/JasonJia/Desktop/CRFE/Xinglin_insilico/phenotype_relevance/GSE1297genes_copy.txt")
write.table(genes$ADJ.PVAL, "/Users/JasonJia/Desktop/CRFE/Xinglin_insilico/phenotype_relevance/GSE1297genes_copy.txt",sep ="\t", row.names = F, quote = F, col.names = F)
write.table(genes$ADJ.PVAL, "/Users/JasonJia/Desktop/CRFE/Xinglin_insilico/phenotype_relevance/GSE1297genes_copy.txt",sep ="\t", row.names = T, quote = F, col.names = F)
genes
rownames(genes)
out = data.frame(row.names(genes), genes$ADJ.PVAL)
out
write.table(out, "/Users/JasonJia/Desktop/CRFE/Xinglin_insilico/phenotype_relevance/GSE1297genes_copy.txt",sep ="\t", row.names = T, quote = F, col.names = F)
write.table(out, "/Users/JasonJia/Desktop/CRFE/Xinglin_insilico/phenotype_relevance/GSE1297genes_copy.txt",sep ="\t", row.names = F, quote = F, col.names = F)
View(out)
write.table(out, "/Users/JasonJia/Desktop/CRFE/Xinglin_insilico/phenotype_relevance/GSE1297genes_copy.txt",sep ="\t", row.names = F, quote = T, col.names = F)
View(kegg.gs)
### Gen-model for CRFE v4
### v3: put genes in P and U buckets based on beta_i and alpha_i
### v4: slopes for true postive terms
##Xinglin Jia
##10/28/2022
##decision tree structure
## load ontology data
setwd("/Users/JasonJia/Desktop/CRFE/Xinglin_insilico")
d = scan("GOecoli.txt", what = "", sep = "\n")
ecoli = strsplit(d, "[[:space:]]+")
names(ecoli) <- sapply(ecoli, `[[`, 1)
ecoli <- lapply(ecoli, `[`, -1)
ecoli_anno = d[sapply(ecoli, length) %in% c(20:200)]
ecoli = ecoli[sapply(ecoli, length) %in% c(20:200)]
ecoli_anno
kegg.gs
ecoli_anno
names(kegg.gs)
seq_along(kegg.gs)
substitute(kegg.gs)
##CRFE
fnlist <- function(x, fil){z <- deparse(substitute(x))
cat(z, "\t", file=fil)
nams=names(x)
for (i in seq_along(x) ){cat(nams[i], "\t", """, x[[i]], ""\n",
file=fil, append=TRUE) }
}
##CRFE
fnlist <- function(x, fil){z <- deparse(substitute(x))
cat(z, "\t", file=fil)
nams=names(x)
for (i in seq_along(x) ){cat(nams[i], "\t", "G", x[[i]], "\n",
file=fil, append=TRUE) }
}
fnlist(kegg.gs,"/Users/JasonJia/Desktop/CRFE/Xinglin_insilico/phenotype_relevance/anno_GO.txt")
##CRFE
fnlist <- function(x, fil){z <- deparse(substitute(x))
cat(z, "\t", file=fil)
nams=names(x)
for (i in seq_along(x) ){cat(nams[i], "\t", x[[i]],"G", "\n",
file=fil, append=TRUE) }
}
fnlist(kegg.gs,"/Users/JasonJia/Desktop/CRFE/Xinglin_insilico/phenotype_relevance/anno_GO.txt")
##CRFE
fnlist <- function(x, fil){z <- deparse(substitute(x))
cat(z, "\t", file=fil)
nams=names(x)
for (i in seq_along(x) ){cat(nams[i], "\t", x[[i]], "\n",
file=fil, append=TRUE) }
}
fnlist(kegg.gs,"/Users/JasonJia/Desktop/CRFE/Xinglin_insilico/phenotype_relevance/anno_GO.txt")
kegg.gs[[1]]
as.vector(kegg.gs[[1]])
as.character(kegg.gs[[1]])
as.data.frame(kegg.gs)
kegg.gs.df = data.frame(names(kegg.gs))
View(kegg.gs.df)
dim(kegg.gs.df)
aggregate(sample ~ names(kegg.gs), df2, toString)
aggregate(sample ~ names(kegg.gs), kegg.gs.df, toString)
unlist(kegg.gs[[1]])
c(unlist(kegg.gs[[1]]), unlist(kegg.gs[[2]]))
array(kegg.gs[[1]])
array(unlist(kegg.gs[[1]]))
